From 1d36748796f0e90743994993c2dee4e96c0fb5b2 Mon Sep 17 00:00:00 2001
From: David Malcolm <dmalcolm@redhat.com>
Date: Tue, 15 Oct 2024 15:02:20 -0400
Subject: [PATCH 7/8] FIXME: also add -fdiagnostics-set-output=

---
 gcc/common.opt         |  4 +++
 gcc/common.opt.urls    |  3 ++
 gcc/doc/invoke.texi    | 18 +++++++---
 gcc/gcc.cc             |  4 +++
 gcc/opts-diagnostic.cc | 77 +++++++++++++++++++++++++++---------------
 gcc/opts-diagnostic.h  |  5 +++
 gcc/opts.cc            |  4 +++
 7 files changed, 82 insertions(+), 33 deletions(-)

diff --git a/gcc/common.opt b/gcc/common.opt
index facc341a6919..6a267b023d81 100644
--- a/gcc/common.opt
+++ b/gcc/common.opt
@@ -1444,6 +1444,10 @@ fdiagnostics-add-output=
 Common Joined RejectNegative
 Add output format.
 
+fdiagnostics-set-output=
+Common Joined RejectNegative
+Set output format.
+
 fdiagnostics-escape-format=
 Common Joined RejectNegative Enum(diagnostics_escape_format)
 -fdiagnostics-escape-format=[unicode|bytes]	Select how to escape non-printable-ASCII bytes in the source for diagnostics that suggest it.
diff --git a/gcc/common.opt.urls b/gcc/common.opt.urls
index a9525a857a64..78e0dc209d14 100644
--- a/gcc/common.opt.urls
+++ b/gcc/common.opt.urls
@@ -567,6 +567,9 @@ UrlSuffix(gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-form
 fdiagnostics-add-output=
 UrlSuffix(gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-add-output)
 
+fdiagnostics-set-output=
+UrlSuffix(gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-set-output)
+
 fdiagnostics-escape-format=
 UrlSuffix(gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-escape-format)
 
diff --git a/gcc/doc/invoke.texi b/gcc/doc/invoke.texi
index 22c9731b4765..7eaa16ab0943 100644
--- a/gcc/doc/invoke.texi
+++ b/gcc/doc/invoke.texi
@@ -306,8 +306,9 @@ Objective-C and Objective-C++ Dialects}.
 -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}
 -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}
 -fdiagnostics-urls=@r{[}auto@r{|}never@r{|}always@r{]}
--fdiagnostics-format=@r{[}text@r{|}sarif-stderr@r{|}sarif-file@r{|}json@r{|}json-stderr@r{|}json-file@r{|}@var{DIAGNOSTICS-OUTPUT-SPEC}@r{]}
+-fdiagnostics-format=@r{[}text@r{|}sarif-stderr@r{|}sarif-file@r{|}json@r{|}json-stderr@r{|}json-file@r{]}
 -fdiagnostics-add-output=@var{DIAGNOSTICS-OUTPUT-SPEC}
+-fdiagnostics-set-output=@var{DIAGNOSTICS-OUTPUT-SPEC}
 -fno-diagnostics-json-formatting
 -fno-diagnostics-show-option  -fno-diagnostics-show-caret
 -fno-diagnostics-show-event-links
@@ -5900,12 +5901,11 @@ is set to @samp{C}, in which case the default is @samp{ascii}.
 @item -fdiagnostics-format=@var{FORMAT}
 Select a different format for printing diagnostics.
 @var{FORMAT} is @samp{text}, @samp{sarif-stderr}, @samp{sarif-file},
-@samp{json}, @samp{json-stderr}, or @samp{json-file}.  It can also be
-a @var{DIAGNOSTIC_OUTPUT_SPEC}, as per @option{-fdiagnostics-add-output=}.
-FIXME: can it?
+@samp{json}, @samp{json-stderr}, or @samp{json-file}.
 
 Using this option replaces any additional ``output sinks'' added by
-@option{-fdiagnostics-add-output=}.
+@option{-fdiagnostics-add-output=}, or that set by
+@option{-fdiagnostics-set-output=}.
 
 The default is @samp{text}.
 
@@ -6002,6 +6002,14 @@ In EBNF:
 
 @end smallexample
 
+@opindex fdiagnostics-set-output
+@item -fdiagnostics-set-output=@var{DIAGNOSTICS-OUTPUT-SPEC}
+This works in a similar way to @option{-fdiagnostics-add-output=} except
+that instead of adding an additional ``output sink'' for diagnostics, it
+replaces all existing output sinks, such as from @option{-fdiagnostics-format=},
+@option{-fdiagnostics-add-output=}, or a prior call to
+@option{-fdiagnostics-set-output=}.
+
 @opindex fno-diagnostics-json-formatting
 @opindex fdiagnostics-json-formatting
 @item -fno-diagnostics-json-formatting
diff --git a/gcc/gcc.cc b/gcc/gcc.cc
index 3386be0fe897..ef7319c9099d 100644
--- a/gcc/gcc.cc
+++ b/gcc/gcc.cc
@@ -4374,6 +4374,10 @@ driver_handle_option (struct gcc_options *opts,
       handle_OPT_fdiagnostics_add_output_ (*opts, *dc, arg, loc);
       break;
 
+    case OPT_fdiagnostics_set_output_:
+      handle_OPT_fdiagnostics_set_output_ (*opts, *dc, arg, loc);
+      break;
+
     case OPT_fdiagnostics_text_art_charset_:
       dc->set_text_art_charset ((enum diagnostic_text_art_charset)value);
       break;
diff --git a/gcc/opts-diagnostic.cc b/gcc/opts-diagnostic.cc
index cbe8ea9e8b05..2e715e764502 100644
--- a/gcc/opts-diagnostic.cc
+++ b/gcc/opts-diagnostic.cc
@@ -18,9 +18,8 @@ along with GCC; see the file COPYING3.  If not see
 <http://www.gnu.org/licenses/>.  */
 
 
-// FIXME:
-/* This file implements the language independent aspect of diagnostic
-   message module.  */
+/* This file implements the options -fdiagnostics-add-output=,
+   -fdiagnostics-set-output=, and their domain-specific language.  */
 
 // FIXME:
 #include "config.h"
@@ -57,13 +56,12 @@ along with GCC; see the file COPYING3.  If not see
 #include "options.h"
 #include "make-unique.h"
 
-/* A namespace for handling the DSL of the argument of
-   -fdiagnostics-add-output=.  */
+/* A namespace for handling the DSL of the arguments of
+   -fdiagnostics-add-output= and -fdiagnostics-set-output=.  */
+
 namespace gcc {
 namespace diagnostics_output_spec {
 
-static const char *const option_name = "-fdiagnostics-add-output=";
-
 /* Decls.  */
 
 struct context
@@ -72,8 +70,10 @@ public:
   context (const gcc_options &opts,
 	   diagnostic_context &dc,
 	   line_maps *location_mgr,
-	   location_t loc)
-  : m_opts (opts), m_dc (dc), m_location_mgr (location_mgr), m_loc (loc)
+	   location_t loc,
+	   const char *option_name)
+  : m_opts (opts), m_dc (dc), m_location_mgr (location_mgr), m_loc (loc),
+    m_option_name (option_name)
   {}
 
   void
@@ -99,6 +99,7 @@ public:
   diagnostic_context &m_dc;
   line_maps *m_location_mgr;
   location_t m_loc;
+  const char *m_option_name;
 };
 
 struct name_and_params
@@ -151,7 +152,7 @@ public:
 	  ctxt.report_error
 	    ("%<%s%s%>:"
 	     " unexpected value %qs for key %qs; expected %qs or %qs",
-	     option_name, unparsed_arg,
+	     ctxt.m_option_name, unparsed_arg,
 	     value.c_str (),
 	     key.c_str (),
 	     "yes", "no");
@@ -182,7 +183,7 @@ public:
       ctxt.report_error
 	("%<%s%s%>:"
 	 " unexpected value %qs for key %qs; known values: %e",
-	 option_name, unparsed_arg,
+	 ctxt.m_option_name, unparsed_arg,
 	 value.c_str (),
 	 key.c_str (),
 	 &e);
@@ -252,7 +253,7 @@ context::report_unknown_key (const char *unparsed_arg,
   report_error
     ("%<%s%s%>:"
      " unknown key %qs for format %qs; known keys: %e",
-     option_name, unparsed_arg,
+     m_option_name, unparsed_arg,
      key.c_str (), format_name.c_str (), &e);
 }
 
@@ -266,9 +267,9 @@ context::report_missing_key (const char *unparsed_arg,
     ("%<%s%s%>:"
      " missing required key %qs for format %qs;"
      " try %<%s%s:%s=%s%>",
-     option_name, unparsed_arg,
+     m_option_name, unparsed_arg,
      key.c_str (), format_name.c_str (),
-     option_name, format_name.c_str (), key.c_str (), metavar);
+     m_option_name, format_name.c_str (), key.c_str (), metavar);
 }
 
 std::unique_ptr<name_and_params>
@@ -293,7 +294,7 @@ parse (const context &ctxt, const char *unparsed_arg)
 		 " expected KEY=VALUE-style parameter for format %qs"
 		 " after %qs;"
 		 " got %qs",
-		 option_name, unparsed_arg,
+		 ctxt.m_option_name, unparsed_arg,
 		 result.m_format.c_str (),
 		 last_separator,
 		 iter);
@@ -354,7 +355,7 @@ output_factory::make_sink (const context &ctxt,
       pp_markup::comma_separated_quoted_strings e (strings);
       ctxt.report_error ("%<%s%s%>:"
 			 " unrecognized format %qs; known formats: %e",
-			 option_name, unparsed_arg,
+			 ctxt.m_option_name, unparsed_arg,
 			 parsed_arg.m_format.c_str (), &e);
       return nullptr;
     }
@@ -486,13 +487,9 @@ handle_OPT_fdiagnostics_add_output_ (const gcc_options &opts,
   gcc_assert (arg);
   gcc_assert (line_table);
 
-  /* TODO: some kind of DSL here?
-     Perhaps:
-       FORMAT:KEY=VALUE,KEY=VALUE
-
-     TODO: Selftests for parser
-  */
-  gcc::diagnostics_output_spec::context ctxt (opts, dc, line_table, loc);
+  const char *const option_name = "-fdiagnostics-add-output=";
+  gcc::diagnostics_output_spec::context ctxt (opts, dc, line_table, loc,
+					      option_name);
   auto result = gcc::diagnostics_output_spec::parse (ctxt, arg);
   if (!result)
     return;
@@ -505,6 +502,30 @@ handle_OPT_fdiagnostics_add_output_ (const gcc_options &opts,
   dc.add_sink (std::move (sink));
 }
 
+void
+handle_OPT_fdiagnostics_set_output_ (const gcc_options &opts,
+				     diagnostic_context &dc,
+				     const char *arg,
+				     location_t loc)
+{
+  gcc_assert (arg);
+  gcc_assert (line_table);
+
+  const char *const option_name = "-fdiagnostics-set-output=";
+  gcc::diagnostics_output_spec::context ctxt (opts, dc, line_table, loc,
+					      option_name);
+  auto result = gcc::diagnostics_output_spec::parse (ctxt, arg);
+  if (!result)
+    return;
+
+  gcc::diagnostics_output_spec::output_factory factory;
+  auto sink = factory.make_sink (ctxt, arg, *result);
+  if (!sink)
+    return;
+
+  dc.set_output_format (std::move (sink));
+}
+
 #if CHECKING_P
 
 namespace selftest {
@@ -534,7 +555,7 @@ struct parser_test
   parser_test ()
   : m_opts (),
     m_dc (),
-    m_ctxt (m_opts, m_dc, line_table, UNKNOWN_LOCATION),
+    m_ctxt (m_opts, m_dc, line_table, UNKNOWN_LOCATION, "-fOPTION="),
     m_fmt (m_dc.get_output_format (0))
   {
     pp_buffer (m_fmt.get_printer ())->m_flush_p = false;
@@ -588,7 +609,7 @@ test_add_output_parse ()
     ASSERT_EQ (result, nullptr);
     ASSERT_TRUE (pt.execution_failed_p ());
     ASSERT_STREQ (pt.get_diagnostic_text (),
-		  "PROGNAME: error: `-fdiagnostics-add-output=foo:':"
+		  "PROGNAME: error: `-fOPTION=foo:':"
 		  " expected KEY=VALUE-style parameter for format `foo'"
 		  " after `:';"
 		  " got `'\n");
@@ -601,7 +622,7 @@ test_add_output_parse ()
     ASSERT_EQ (result, nullptr);
     ASSERT_TRUE (pt.execution_failed_p ());
     ASSERT_STREQ (pt.get_diagnostic_text (),
-		  "PROGNAME: error: `-fdiagnostics-add-output=foo:=':"
+		  "PROGNAME: error: `-fOPTION=foo:=':"
 		  " expected KEY=VALUE-style parameter for format `foo'"
 		  " after `:';"
 		  " got `='\n");
@@ -614,7 +635,7 @@ test_add_output_parse ()
     ASSERT_EQ (result, nullptr);
     ASSERT_TRUE (pt.execution_failed_p ());
     ASSERT_STREQ (pt.get_diagnostic_text (),
-		  "PROGNAME: error: `-fdiagnostics-add-output=foo:key,':"
+		  "PROGNAME: error: `-fOPTION=foo:key,':"
 		  " expected KEY=VALUE-style parameter for format `foo'"
 		  " after `:';"
 		  " got `key,'\n");
@@ -638,7 +659,7 @@ test_add_output_parse ()
     ASSERT_EQ (result, nullptr);
     ASSERT_TRUE (pt.execution_failed_p ());
     ASSERT_STREQ (pt.get_diagnostic_text (),
-		  "PROGNAME: error: `-fdiagnostics-add-output=foo:key=value,':"
+		  "PROGNAME: error: `-fOPTION=foo:key=value,':"
 		  " expected KEY=VALUE-style parameter for format `foo'"
 		  " after `,';"
 		  " got `'\n");
diff --git a/gcc/opts-diagnostic.h b/gcc/opts-diagnostic.h
index 3b8c7929f6ae..95fc16bb3232 100644
--- a/gcc/opts-diagnostic.h
+++ b/gcc/opts-diagnostic.h
@@ -65,4 +65,9 @@ handle_OPT_fdiagnostics_add_output_ (const gcc_options &opts,
 				     const char *arg,
 				     location_t loc);
 
+extern void
+handle_OPT_fdiagnostics_set_output_ (const gcc_options &opts,
+				     diagnostic_context &dc,
+				     const char *arg,
+				     location_t loc);
 #endif
diff --git a/gcc/opts.cc b/gcc/opts.cc
index eb7addf43589..af7c5ee345f2 100644
--- a/gcc/opts.cc
+++ b/gcc/opts.cc
@@ -2977,6 +2977,10 @@ common_handle_option (struct gcc_options *opts,
       handle_OPT_fdiagnostics_add_output_ (*opts, *dc, arg, loc);
       break;
 
+    case OPT_fdiagnostics_set_output_:
+      handle_OPT_fdiagnostics_set_output_ (*opts, *dc, arg, loc);
+      break;
+
     case OPT_fdiagnostics_text_art_charset_:
       dc->set_text_art_charset ((enum diagnostic_text_art_charset)value);
       break;
-- 
2.26.3

